@using Chinook.Models;
@using System.Security.Claims;
@using Chinook.Services.Interfaces;


@inject NavigationManager NavigationManager
@inject INavMenuDataService NavMenuDataService
@inject ICommonDataService CommonDataService

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">Chinook</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span>Home
            </NavLink>
        </div>
        @foreach (var playlist in CurrentPlaylist)
        {
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="" 
                            @onclick="() => NavigateToPlaylist(playlist.PlaylistId)">
                    <i class="bi bi-music-note-list me-3" style="font-size: 1.25em"></i>@playlist.Name
                </NavLink>
            </div>
        }     

    </nav>
</div>

@code {

    [CascadingParameter] private Task<AuthenticationState> authenticationState { get; set; }


    private bool collapseNavMenu = true;
    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;    

    private List<Playlist> CurrentPlaylist = new List<Playlist>();
    private string CurrentUserId;

    protected override async Task OnInitializedAsync()
    {
        
        // Subscribe to the event that is raised when a new playlist is added
        CommonDataService.RefreshNavMenu += async () => await RefreshNavMenuAsync();

        // Get the current user id
        CurrentUserId = await GetUserId();

        if (CurrentUserId is null)
        {
            NavigationManager.NavigateTo("/Identity/Account/Login", true);
        }
        else
        {
            await InvokeAsync(StateHasChanged);

            // Check whether the default playlist is there if not add it
            await NavMenuDataService.AddDefaultPlaylistAsync(CurrentUserId);

            // Load data to the NavMenu component
            await LoadDataAsync();
        }
        

    }

    private async Task RefreshNavMenuAsync()
    {
        try
        {
            // Load data again as part of handling the event 
            await LoadDataAsync();
            await InvokeAsync(StateHasChanged);
        }
        catch(Exception ex)
        {
            throw new Exception($"An error occured while refreshing the NavMenu component. Error : {ex.Message}");
        }

    }

    public void Dispose()
    {
        try
        {
            // Unsubscribe to the event
            CommonDataService.RefreshNavMenu -= async () => await RefreshNavMenuAsync();
        }
        catch(Exception ex)
        {
            throw new Exception($"An error occured while unsubscribing to the event. Error : {ex.Message}");
        }

    }

    private void NavigateToPlaylist(long Id)
    {
        try
        {
            // Navigating to the Playlist page with the given id
            string routerPath = $"playlist/{Id.ToString()}";
            NavigationManager.NavigateTo(routerPath);
        }
        catch(Exception ex)
        {
            throw new Exception($"An error occured while trying to navigate to the Playlist page.. Eror : {ex.Message}");
        }

    }

    private async Task LoadDataAsync()
    {
        try
        {
            // Get the Plalists data
            CurrentPlaylist = await NavMenuDataService.GetPlaylistsByUserIdAsync(CurrentUserId);
        }
        catch(Exception ex)
        {
            throw new Exception($"An error occured while loading data to NavMenu component. Error : {ex.Message}");
        }

    }

    private async Task<string> GetUserId()
    {
        var user = (await authenticationState).User;
        var userId = user.FindFirst(u => u.Type.Contains(ClaimTypes.NameIdentifier))?.Value;
        return userId;
    }

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }
}
