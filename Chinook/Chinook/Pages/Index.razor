@page "/"
@attribute [Authorize]

@using Chinook.Models
@using Chinook.Services.Interfaces;


@inject IIndexPageDataService IndexPageDataService

<PageTitle>Index</PageTitle>

<h1>Artists</h1>
<input type="text" value="@searchQuery" @oninput="FilterArtists" placeholder="Search..." />

@if (FilterArtists == null)
{
    <Loading />
}
else
{
    <table class="table table-striped table-hover table-sm">
        <thead>
            <tr>
                <th>Name</th>
                <th>Number of albums</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var artist in FilterdArtists)
            {
                <tr>
                    <td><a href="Artist/@artist.ArtistId">@artist.Name</a></td>
                    <td>@artist.Albums.Count()</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Artist> OriginalArtists;
    private List<Artist> FilterdArtists;
    private string searchQuery;

    protected override async Task OnInitializedAsync() 
    {
        try
        {
            await InvokeAsync(StateHasChanged);
            // Fetch the artists from the database
            OriginalArtists = await IndexPageDataService.GetArtistsAsync();
            // Assign the artists from the data based into the filtered list
            // This list is filtered based on the search query
            FilterdArtists = OriginalArtists;
        }
        catch(Exception ex)
        {
            throw new Exception($"An error occured while initializing Index Page. Error : {ex.Message}");
        }

    }    

    private void FilterArtists(ChangeEventArgs e)
    {
        try
        {
            // Get thw search query as the user types it in the input box
            searchQuery = e.Value.ToString();
            // Filter the Artists based on the search query
            FilterdArtists = OriginalArtists.Where(o => o.Name.Contains(searchQuery, StringComparison.OrdinalIgnoreCase)).ToList();
        }
        catch(Exception ex)
        {
            throw new Exception($"An error occured while filtering the Artists based on the search query. Error : {ex.Message}");
        }

    }
}
