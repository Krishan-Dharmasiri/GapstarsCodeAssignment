@page "/artist/{ArtistId:long}"
@attribute [Authorize]

@using Chinook.Models
@using Chinook.ClientModels
@using Chinook.Services.Interfaces;
@using System.Security.Claims;

@inject IArtistPageDataService ArtistPageDataService
@inject ICommonDataService CommonDataService

@if (!string.IsNullOrWhiteSpace(InfoMessage))
{
    <div class="alert alert-info fade show">
        <div class="d-flex align-items-start">
            <div class="flex-grow-1">
                @InfoMessage
            </div>
            <button type="button" class="btn-close" aria-label="Close" @onclick="CloseInfoMessage"></button>
        </div>
    </div>
}

@if (Artist == null)
{
    <Loading />
}
else
{
    <h1>@Artist.Name</h1>
        <table class="table table-striped table-hover table-sm">
            <thead>
                <tr>
                    <th>Album title</th>
                    <th>Track name</th>
                    <th></th>
            </tr>
            </thead>
            <tbody>
            @foreach (var track in Tracks)
            {
                <tr>
                    <td>@track.AlbumTitle</td>
                    <td>@track.TrackName</td>
                    <td>
                        @if (track.IsFavorite)
                        {
                            <a href="#" class="m-1" title="Unmark as favorite" @onclick="@(() => UnfavoriteTrack(track.TrackId))" @onclick:preventDefault><i class="bi bi-star-filled"></i></a>
                        }
                        else
                        {
                            <a href="#" class="m-1" title="Mark as favorite" @onclick="@(() => FavoriteTrack(track.TrackId))" @onclick:preventDefault><i class="bi bi-star"></i></a>
                        }
                        <a href="#" class="m-1" title="Add to playlist" @onclick="@(() => OpenPlaylistDialog(track.TrackId))" @onclick:preventDefault><i class="bi bi-file-earmark-plus"></i></a>
                    </td>
                </tr>
            }
            </tbody>
        </table>

}

@code {
    [Parameter] public long ArtistId { get; set; }
    [CascadingParameter] private Task<AuthenticationState> authenticationState { get; set; }
    private Modal PlaylistDialog { get; set; }    

    private Artist Artist;
    private List<PlaylistTrackClientModel> Tracks;    
    private PlaylistTrackClientModel SelectedTrack;
    private string InfoMessage;
    private string CurrentUserId;

    private List<Playlist> Playlists;
    private string NewPlaylistName;
    private long SelectedPlaylistId;
    private string SelectedPlayListName;


    protected override async Task OnInitializedAsync()
    {
        try
        {
            await InvokeAsync(StateHasChanged);
            CurrentUserId = await GetUserId();

            // Get the Artist based on the Id
            Artist = await ArtistPageDataService.GetArtistByIdAsync(ArtistId);

            // Gets Tracks that are available in the current user's playlists
            Tracks = await ArtistPageDataService.GetTracksByUserAndArtistAsync(CurrentUserId, ArtistId);

            // Gets the playlists that belong to the current user
            Playlists = await ArtistPageDataService.GetPlaylistsByUserAsync(CurrentUserId);
        }
        catch(Exception ex)
        {
            throw new Exception($"An Error occued while initializing ArtistPage. Error : {ex.Message}");
        }

    }

    private async Task<string> GetUserId()
    {
        try
        {
            var user = (await authenticationState).User;
            var userId = user.FindFirst(u => u.Type.Contains(ClaimTypes.NameIdentifier))?.Value;
            return userId;
        }
        catch(Exception ex)
        {
            throw new Exception($"An error occured while getting the current user. Error : {ex.Message}");
        }

    }

    private async void FavoriteTrack(long trackId)
    {
        try
        {
            // Get the playlist Id of the "My favorite tracks" playlist
            var defaultPlaylistId = await ArtistPageDataService.GetDefaultPlaylistIdAsync(CurrentUserId);

            // Add the selected track into the "My favorite tracks" playlist
            await ArtistPageDataService.AddPlaylistTrackAsync(defaultPlaylistId, trackId);

            var track = Tracks.FirstOrDefault(t => t.TrackId == trackId);
            InfoMessage = $"Track {track.ArtistName} - {track.AlbumTitle} - {track.TrackName} added to playlist Favorites.";
        }
        catch(Exception ex)
        {
            throw new Exception($"An error occured while adding the track to the favorite playlist. Error : {ex.Message}");
        }

    }

    private void UnfavoriteTrack(long trackId)
    {
        var track = Tracks.FirstOrDefault(t => t.TrackId == trackId);
        InfoMessage = $"Track {track.ArtistName} - {track.AlbumTitle} - {track.TrackName} removed from playlist Favorites.";
    }

    private void OpenPlaylistDialog(long trackId)
    {
        CloseInfoMessage();
        SelectedTrack = Tracks.FirstOrDefault(t => t.TrackId == trackId);
        PlaylistDialog.Open();
    }

    private async void AddTrackToPlaylist()
    {
        try
        {
            CloseInfoMessage();

            // When user selects an existing playlist
            if (SelectedPlaylistId != 0)
            {
                //Get the selected playlist name
                SelectedPlayListName = Playlists.FirstOrDefault(p => p.PlaylistId == SelectedPlaylistId).Name;

                // Add the record into the DB
                await ArtistPageDataService.AddPlaylistTrackAsync(SelectedPlaylistId, SelectedTrack.TrackId);

                InfoMessage = $"Track {Artist.Name} - {SelectedTrack.AlbumTitle} - {SelectedTrack.TrackName} added to playlist {SelectedPlayListName}.";

            }

            // When user types a new playlist
            if (!string.IsNullOrEmpty(NewPlaylistName))
            {

                long newId = await ArtistPageDataService.GetLastPlaylistIdAsync() + 1;

                await ArtistPageDataService.AddPlaylistAsync(NewPlaylistName, newId);

                await ArtistPageDataService.AddUserPlaylistAsync(CurrentUserId, newId);

                await ArtistPageDataService.AddPlaylistTrackAsync(newId, SelectedTrack.TrackId);

                InfoMessage = $"Track {Artist.Name} - {SelectedTrack.AlbumTitle} - {SelectedTrack.TrackName} added to playlist {NewPlaylistName}.";

                // Notify the NavMenu componet so it can refresh and get the newly added Playlist
                CommonDataService.InvokeRefreshNavMenu();
            }

            PlaylistDialog.Close();
        }
        catch(Exception ex)
        {
            throw new Exception($"An error occured while adding a track to playlist. Error : {ex.Message}");
        }

        
    }

    private void CloseInfoMessage()
    {
        InfoMessage = "";
    }


}

<Modal @ref="PlaylistDialog">
    <Title>
        Add to playlist
    </Title>
    <Body>
        @if (SelectedTrack != null)
        {
            <div class="form-group mb-2">
                <label>@Artist.Name - @SelectedTrack.AlbumTitle - @SelectedTrack.TrackName</label>
            </div>
        }

        <div class="form-group mb-2">
            <label for="ExistingPlaylist">Add to existing playlist</label>
            <select @bind="@SelectedPlaylistId"
                    class="form-control" id="ExistingPlaylist">
                @foreach (var playlist in Playlists)
                {
                    <option value="@playlist.PlaylistId">@playlist.Name</option>
                }
            </select>
        </div>
        <div class="form-group mb-2">
            <label for="NewPlaylist">Create new playlist</label>
            <input type="text" id="NewPlaylist" @bind="@NewPlaylistName" class="form-control" placeholder="Name for the new playlist">
        </div>
    </Body>
    <Footer>
        <button class="btn btn-success" @onclick="AddTrackToPlaylist">Save</button>
    </Footer>
</Modal>
